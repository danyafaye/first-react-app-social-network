{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["TextArea","Input","Chat","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessageForm","messages","setMessages","messageHandler","e","newMessages","JSON","parse","data","prevMessages","style","height","overflowY","map","m","index","Message","message","src","photo","width","userName","setMessage","readyStatus","setReadyStatus","openHandler","rows","onChange","currentTarget","value","disabled","onClick","send","ChatPage"],"mappings":"oKAGQA,EAAaC,IAAbD,SAeFE,EAAiB,WAAO,IAAD,EACSC,mBAA2B,MADpC,mBAClBC,EADkB,KACPC,EADO,KAuBzB,OApBAC,qBAAU,WACN,IAAIC,EACEC,EAAe,WACjBC,WAAWC,EAAe,MAE9B,SAASA,IAAiB,IAAD,MACf,QAAF,EAAAH,SAAA,SAAII,oBAAoB,QAASH,GAC/B,QAAF,EAAAD,SAAA,SAAIK,QAEN,QAAF,EADAL,EAAK,IAAIM,UAAU,uEACnB,SAAIC,iBAAiB,QAASN,GAC9BH,EAAaE,GAIjB,OAFAG,IAEM,WACFH,EAAGI,oBAAoB,QAASH,GAChCD,EAAGK,WAER,IAEI,gCACH,cAACG,EAAD,CAAUX,UAAWA,IACrB,cAACY,EAAD,CAAgBZ,UAAWA,QAI7BW,EAAoD,SAAC,GAAiB,IAAhBX,EAAe,EAAfA,UAAe,EACvCD,mBAA4B,IADW,mBAChEc,EADgE,KACtDC,EADsD,KAYvE,OAVAZ,qBAAU,WACN,IAAIa,EAAiB,SAACC,GAClB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BN,GAAY,SAACO,GAAD,4BAAsBA,GAAtB,YAAuCJ,QAGvD,OADS,OAATjB,QAAS,IAATA,KAAWU,iBAAiB,UAAWK,GAChC,WACM,OAATf,QAAS,IAATA,KAAWO,oBAAoB,UAAWQ,MAE/C,CAACf,IACG,qBAAKsB,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAzC,SACFX,EAASY,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAqBC,QAASH,GAAhBC,SAI5CC,EAAgD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpD,OAAO,gCACH,qBAAKC,IAAKD,EAAQE,MAAOT,MAAO,CAACU,MAAO,UADrC,IACgD,4BAAIH,EAAQI,WAC/D,uBACCJ,EAAQA,QACT,2BAGFjB,EAA0D,SAAC,GAAiB,IAAhBZ,EAAe,EAAfA,UAAe,EAChDD,mBAAS,IADuC,mBACvE8B,EADuE,KAC9DK,EAD8D,OAExCnC,mBAA8B,WAFU,mBAEvEoC,EAFuE,KAE1DC,EAF0D,KAI7ElC,qBAAU,WACN,IAAImC,EAAc,WACdD,EAAe,UAGnB,OADS,OAATpC,QAAS,IAATA,KAAWU,iBAAiB,OAAQ2B,GAC7B,WACM,OAATrC,QAAS,IAATA,KAAWO,oBAAoB,OAAQ8B,MAE7C,CAACrC,IAUH,OAAO,gCACH,8BACI,cAACJ,EAAD,CAAU0C,KAAM,EAAGC,SAAU,SAACvB,GAAD,OAAKkB,EAAWlB,EAAEwB,cAAcC,QAAQA,MAAOZ,MAEhF,8BACI,cAAC,IAAD,CAAQa,SAAuB,MAAb1C,GAAqC,UAAhBmC,EAAyBQ,QAbpD,WACZd,IAGK,OAAT7B,QAAS,IAATA,KAAW4C,KAAKf,GAChBK,EAAW,MAQP,wBAKGW,UA5FY,WACvB,OAAO,8BACH,cAAC/C,EAAD","file":"static/js/6.80294b76.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Button } from 'antd'\r\nimport { Input } from 'antd';\r\nconst { TextArea } = Input;\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\r\n    useEffect(()=>{\r\n        let ws: WebSocket\r\n        const closeHandler = () => {\r\n            setTimeout(createChannel, 3000)\r\n        }\r\n        function createChannel() {\r\n                ws?.removeEventListener('close', closeHandler)\r\n                ws?.close()\r\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n            ws?.addEventListener('close', closeHandler)\r\n            setWsChannel(ws)\r\n        }\r\n        createChannel()\r\n\r\n        return() => {\r\n            ws.removeEventListener('close', closeHandler)\r\n            ws.close()\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        <Messages wsChannel={wsChannel}/>\r\n        <AddMessageForm wsChannel={wsChannel}/>\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{wsChannel: WebSocket | null}> = ({wsChannel}) => {\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n    useEffect(()=>{\r\n        let messageHandler = (e: MessageEvent)=>{\r\n            let newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\r\n        };\r\n        wsChannel?.addEventListener('message', messageHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener('message', messageHandler)\r\n        }\r\n    }, [wsChannel])\r\n    return <div style={{height: '400px', overflowY: 'auto'}}>\r\n        {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n    </div>\r\n}\r\n\r\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\r\n    return <div>\r\n        <img src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n}\r\nconst AddMessageForm: React.FC<{wsChannel: WebSocket | null}> = ({wsChannel}) => {\r\n    const[message, setMessage] = useState('')\r\n    const[readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\n    useEffect(()=>{\r\n        let openHandler = ()=>{\r\n            setReadyStatus('ready')\r\n        };\r\n        wsChannel?.addEventListener('open', openHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener('open', openHandler)\r\n        }\r\n    },[wsChannel])\r\n\r\n    const sendMessage = () => {\r\n        if(!message){\r\n            return;\r\n        }\r\n        wsChannel?.send(message)\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <TextArea rows={4} onChange={(e)=>setMessage(e.currentTarget.value)} value={message}/>\r\n        </div>\r\n        <div>\r\n            <Button disabled={wsChannel == null || readyStatus !== 'ready'} onClick={sendMessage}>Send</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage;"],"sourceRoot":""}