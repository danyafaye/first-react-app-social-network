{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","saveButton","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","editButton","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","inputPhoto","target","files","length","initialValues","formData","then","Post","item","message","likesCount","required","MyPosts","postsElements","posts","p","id","postsBlock","postsDev","values","addPost","newPostText","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","prevProps","prevState","refreshProfile","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.85ac4400.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2PNxs\",\"mainPhoto\":\"ProfileInfo_mainPhoto__Ddm9Z\",\"contact\":\"ProfileInfo_contact__2kjn6\",\"saveButton\":\"ProfileInfo_saveButton__3P782\",\"editButton\":\"ProfileInfo_editButton__Vd8GK\",\"inputPhoto\":\"ProfileInfo_inputPhoto__1DnX_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__sP9qn\",\"posts\":\"MyPosts_posts__rz_ul\",\"postsDev\":\"MyPosts_postsDev__3JRcI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2EufB\"};","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status:string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks:React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status] )\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status:</b><span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                    onBlur={deactivateEditMode} autoFocus={true}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport { createField, GetStringKeys, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport { ProfileType } from '../../../Types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm:React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div className={s.saveButton}>\r\n            <button>Save</button>\r\n        </div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\",\r\n            \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>: {createField<ProfileTypeKeys>(\"My professional skills\",\r\n            \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>:{createField<ProfileTypeKeys>(\"About me\",\r\n            \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b> {/*todo: create some solution for embedded objects*/}\r\n                    {key}:{createField(key,\r\n                    \"contacts.\" + key, [], Input)}\r\n                </b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { ChangeEvent, useState } from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"../../../components/Profile/ProfileInfo/ProfileStatusWithHooks\";\r\nimport userPhoto from \"./../../../assets/images/users.png\";\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { ContactsType, ProfileType } from '../../../Types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({\r\n                         profile, status, updateStatus, isOwner, savePhoto\r\n                         , saveProfile\r\n                     }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        //todo:remove then\r\n        saveProfile(formData).then(() => {\r\n                setEditMode(false);\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input className={s.inputPhoto} type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button className={s.editButton} onClick={goToEditMode}>Edit profile info</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {\r\n            Object\r\n            .keys(profile.contacts)\r\n            .map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://miro.medium.com/max/1200/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, GetStringKeys, Textarea } from '../../../../components/common/FormsControls/FormsControls';\r\nimport { required } from '../../../../utils/validators/validators';\r\nimport React from 'react';\r\n\r\ntype PropsType = {\r\n\r\n}\r\nexport type AddPostFormValuesType = {\r\n    newPostText:string\r\n}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm:React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(\r\n                    \"Post message\",\r\n                    'newPostText',\r\n                    [required],\r\n                    Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>\r\n({form: \"ProfileAddNewPostForm\"})(AddPostForm)","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from './../../../components/Profile/MyPosts/Post/Post';\r\nimport AddPostForm, { AddPostFormValuesType } from '../../../components/Profile/MyPosts/AddPostForm/AddPostForm';\r\nimport { PostType } from '../../../Types/types';\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h1 className={s.postsDev}>IN DEVELOPMENT STAGE</h1>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n\r\n                {postsElements}\r\n\r\n            </div>\r\n        </div>\r\n    )}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized;","import React from \"react\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, { DispatchPropsType, MapPropsType } from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps,\r\n    {addPost: actions.addPostCreator\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"../../components/Profile/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"../../components/Profile/MyPosts/MyPostsContainer\";\r\nimport { ProfileType } from '../../Types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport { getStatus, getUserProfile, savePhoto, saveProfile, updateStatus } from \"../../redux/profile-reducer\";\r\nimport {compose} from \"redux\";\r\nimport { AppStateType } from './../../redux/redux-store';\r\nimport { ProfileType } from '../../Types/types';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                //todo: may be replace push with Redirect?\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n\r\n        if(!userId){\r\n            console.error(\"ID should exists in URI params or in state(authorizedUserId)\")\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState:PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile, getStatus,\r\n        updateStatus, savePhoto, saveProfile\r\n    }),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}